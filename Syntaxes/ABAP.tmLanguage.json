{
  "fileTypes": [
    "abap",
    "ABAP"
  ],
  "foldingStartMarker": "/\\*\\*|\\{\\s*$",
  "foldingStopMarker": "\\*\\*/|^\\s*\\}",
  "keyEquivalent": "^~A",
  "name": "ABAP",
  "patterns": [
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.abap"
        }
      },
      "match": "^\\*.*\\n?",
      "name": "comment.line.full.abap"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.abap"
        }
      },
      "match": "\".*\\n?",
      "name": "comment.line.partial.abap"
    },
    {
      "match": "(?<![^\\s])##.*?(?=([\\.:,\\s]))",
      "name": "comment.line.pragma.abap"
    },
    {
      "match": "\\b[0-9]+(\\b|\\.|,)",
      "name": "constant.numeric.abap"
    },
    {
      "begin": "(?<!\\\\)(\\|)(.*?)",
      "end": "(?<!\\\\)(\\|)",
      "name": "string.interpolated.abap",
      "beginCaptures": {
        "1": {
          "name": "constant.character.escape.abap"
        }
      },
      "endCaptures": {
        "1": {
          "name": "constant.character.escape.abap"
        }
      },
      "patterns": [
        {
          "match": "({ )|( })",
          "name": "constant.character.escape"
        },
        {
          "match": "(?<={ ).*?(?= })",
          "name": "variable.other.abap"
        },
        {
          "match": "\\\\\\|",
          "name": "constant.character.escape.abap"
        }
      ]
    },
    {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.abap",
      "patterns": [
        {
          "match": "''",
          "name": "constant.character.escape.abap"
        }
      ]
    },
    {
      "begin": "`",
      "end": "`",
      "name": "string.quoted.single.abap",
      "patterns": [
        {
          "match": "``",
          "name": "constant.character.escape.abap"
        }
      ]
    },
    {
      "begin": "(?i)^\\s*(class|method|form)\\s([a-z_][a-z_0-9]*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.block.abap"
        },
        "2": {
          "name": "entity.name.type.block.abap"
        }
      },
      "end": "\\s*\\.\\s*\\n?",
      "name": "meta.block.begin.implementation.abap",
      "patterns": [
        {
          "match": "(?ix)(^|\\s+)(definition|implementation|public|inheriting\\s+from|final|abstract|shared\\s+memory\\s+enabled|(global)*\\s*friends|(create\\s+(public|protected|private))|for\\s+testing|risk\\s+level\\s+(critical|dangerous|harmless))|duration\\s(short|medium|long)(?=\\s+|\\.)",
          "name": "storage.modifier.class.abap"
        },
        {
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "contentName": "entity.name.type.block.abap",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#generic_names"
            }
          ]
        }
      ]
    },
    {
      "begin": "(?i)^\\s*(interface)\\s([a-z_][a-z_0-9]*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.block.abap"
        },
        "2": {
          "name": "entity.name.type.block.abap"
        }
      },
      "end": "\\s*\\.\\s*\\n?",
      "name": "meta.block.begin.interface.definition.abap",
      "patterns": [
        {
          "match": "(?ix)(^|\\s+)(deferred|public)(?=\\s+|\\.)",
          "name": "storage.modifier.interface.abap"
        },
        {
          "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
          "contentName": "entity.name.type.block.abap",
          "end": "(?![A-Za-z0-9_])",
          "patterns": [
            {
              "include": "#generic_names"
            }
          ]
        }
      ]
    },
    {
      "match": "(?i)(endclass|endmethod|endform)",
      "name": "storage.type.block.end.abap"
    },
    {
      "match": "(?i)(<[A-Za-z_][A-Za-z0-9_]*>)",
      "name": "variable.other.field.symbol.abap"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#abap_constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#abaptypes"
    },
    {
      "include": "#system_fields"
    }
  ],
  "repository": {
    "abap_constants": {
      "match": "(?ix)(?<=\\s)(initial|null|space|abap_true|abap_false|table_line)(?=\\s|\\.|,)",
      "name": "constant.language.abap"
    },
    "abaptypes": {
      "match": "(?ix)\\s(abap_bool|string|xstring|any|clike|csequence|numeric|xsequence|c|n|i|p|f|d|t|x)(?=\\s|\\.|,)",
      "name": "support.type.abap"
    },
    "arithmetic_operator": {
      "match": "(?<=\\s)(\\+|\\-|\\*|\\*\\*|/|%)(?=\\s)",
      "name": "keyword.operator.arithmetic.abap"
    },
    "comparison_operator": {
      "match": "(?i)(?<=\\s)(<|>|<\\=|>\\=|\\=|<>|eq|ne|lt|le|gt|ge|cs|cp)(?=\\s)",
      "name": "keyword.operator.comparison.abap"
    },
    "control_keywords": {
      "match": "(?ix)(^|\\s)(at|case|catch|continue|do|elseif|else|endat|endcase|enddo|endif|endloop|endon|if|loop|on|raise|try)(?=\\s|\\.|:)",
      "name": "keyword.control.flow.abap"
    },
    "generic_names": {
      "match": "[A-Za-z_][A-Za-z0-9_]*"
    },
    "keywords": {
      "patterns": [
        {
          "include": "#main_keywords"
        },
        {
          "include": "#control_keywords"
        },
        {
          "include": "#keywords_followed_by_braces"
        }
      ]
    },
    "logical_operator": {
      "match": "(?i)(?<=\\s)(not|or|and)(?=\\s)",
      "name": "keyword.operator.arithmetic.abap"
    },
    "system_fields": {
      "match": "(?ix)\\b(sy-)(abcde|batch|binpt|calld|callr|colno|cpage|cprog|cucol|curow|datar|datlo|datum|dayst|dbcnt|dbnam|dbsysc|dyngr|dynnr|fdayw|fdpos|host|index|langu|ldbpg|lilli|linct|linno|linsz|lisel|listi|loopc|lsind|macol|mandt|marow|modno|msgid|msgno|msgty|msgv[1-4]|opsysc|pagno|pfkey|repid|saprl|scols|slset|spono|srows|staco|staro|stepl|subrc|sysid|tabix|tcode|tfill|timlo|title|tleng|tvar[0-9]|tzone|ucomm|uline|uname|uzeit|vline|wtitl|zonlo)(?=\\.|\\s)",
      "name": "variable.language.abap"
    },
    "main_keywords": {
      "match": "(?ix)(?<=^|\\s)(abstract|add|add-corresponding|adjacent|alias|aliases|all|append|appending|ascending|as|assert|assign|assigning|authority-check|back|begin|binary|bound|break-point|by|byte|call|cast|changing|check|class-data|class-method|class-methods|clear|close|cnt|collect|commit|character|corresponding|communication|component|compute|concatenate|condense|constants|conv|controls|convert|create|currency|data|descending|default|define|deferred|delete|describe|detail|divide|divide-corresponding|display-mode|duplicates|deleting|editor-call|end|endexec|endfunction|ending|endinterface|endmodule|end-of-definition|end-of-page|end-of-selection|end-test-injection|end-test-seam|endprovide|endselect|endtry|endwhile|event|events|exec|exit|export|exporting|extract|exception|exceptions|field-symbols|field-groups|first|fetch|fields|format|free|from|function|find|for|function-pool|generate|get|hide|import|importing|index|infotypes|initial|initialization|id|is|in|interface|interfaces|input|insert|into|key|left-justified|leave|like|line|line-count|line-size|load|local|length|left|leading|lower|method|message|message-id|methods|modify|module|move|move-corresponding|multiply|multiply-corresponding|match|new|new-line|new-page|new-section|no|no-gap|no-sign|no-zero|number|occurrence|object|obligatory|of|overlay|optional|others|occurrences|occurs|offset|pack|parameters|perform|places|position|print-control|private|program|protected|provide|public|put|radiobutton|raising|ranges|receive|receiving|redefinition|reference|refresh|regex|reject|results|ref|replace|report|reserve|restore|return|returning|right-justified|rollback|read|read-only|rp-provide-from-last|scan|screen|scroll|search|select|select-options|selection-screen|separated|set|shift|single|skip|sort|sorted|split|standard|starting|start-of-selection|sum|subtract-corresponding|statics|step|stop|structure|submatches|submit|subtract|summary|supplied|suppress|section|syntax-check|syntax-trace|system-call|tables|table|testing|test-seam|test-injection|then|times|titlebar|to|top-of-page|trailing|transfer|transformation|translate|transporting|types|type|type-pool|type-pools|unassign|uline|unpack|update|using|value|when|while|window|write|where|with|work)(?=\\s|\\.|:)",
      "name": "keyword.control.simple.abap"
    },
    "math_operators": {
      "match": "(?ix)\\s(abs|sign|ceil|floor|trunc|frac|acos|asin|atan|cos|sin|tan|cosh|sinh|tanh|exp|log|log10|sqrt)\\(",
      "name": "keyword.operator.math.abap"
    },
    "keywords_followed_by_braces": {
      "match": "(?ix)\\b(data|value|field-symbol)(?=\\()",
      "name": "keyword.control.simple.abap"
    },
    "operators": {
      "patterns": [
        {
          "include": "#other_operator"
        },
        {
          "include": "#math_operators"
        },
        {
          "include": "#string_operators"
        },
        {
          "include": "#arithmetic_operator"
        },
        {
          "include": "#comparison_operator"
        },
        {
          "include": "#logical_operator"
        }
      ]
    },
    "other_operator": {
      "match": "\\s(&&|\\?\\=)\\s",
      "name": "keyword.operator.other.abap"
    },
    "string_operators": {
      "match": "(?ix)\\s(strlen|xstrlen|charlen|lines|numofchar|dbmaxlen)\\(",
      "name": "keyword.operator.string.abap"
    }
  },
  "scopeName": "source.abap",
  "uuid": "0357FFB4-EFFF-4DE9-8371-B0F9C8DF1B21"
}